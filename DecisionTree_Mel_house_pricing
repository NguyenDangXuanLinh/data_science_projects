{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":38454,"sourceType":"datasetVersion","datasetId":2709},{"sourceId":260251,"sourceType":"datasetVersion","datasetId":108980}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**[Machine Learning Course Home Page](https://www.kaggle.com/learn/machine-learning)**\n\n---\n","metadata":{"execution":{"iopub.status.busy":"2024-05-21T22:14:27.423103Z","iopub.execute_input":"2024-05-21T22:14:27.423526Z","iopub.status.idle":"2024-05-21T22:14:27.464314Z","shell.execute_reply.started":"2024-05-21T22:14:27.423453Z","shell.execute_reply":"2024-05-21T22:14:27.462901Z"}}},{"cell_type":"code","source":"# Set up code checking\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.machine_learning.ex2 import *\nprint(\"Setup Complete\")","metadata":{"execution":{"iopub.status.busy":"2024-05-21T22:18:09.827214Z","iopub.execute_input":"2024-05-21T22:18:09.827767Z","iopub.status.idle":"2024-05-21T22:18:11.108050Z","shell.execute_reply.started":"2024-05-21T22:18:09.827704Z","shell.execute_reply":"2024-05-21T22:18:11.106773Z"},"trusted":true},"execution_count":3,"outputs":[{"name":"stdout","text":"Setup Complete\n","output_type":"stream"}]},{"cell_type":"markdown","source":"## Step 1: Loading Data\nRead the Iowa data file into a Pandas DataFrame called `home_data`.","metadata":{}},{"cell_type":"code","source":"import pandas as pd\n\n# Path of the file to read\niowa_file_path = '../input/home-data-for-ml-course/train.csv'\n\n# Fill in the line to read the file into a variable home_data\nhome_data = pd.read_csv(iowa_file_path)\n\n# Call line below with no argument to check that I've loaded the data correctly\nstep_1.check()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T22:18:11.110051Z","iopub.execute_input":"2024-05-21T22:18:11.110559Z","iopub.status.idle":"2024-05-21T22:18:11.177014Z","shell.execute_reply.started":"2024-05-21T22:18:11.110526Z","shell.execute_reply":"2024-05-21T22:18:11.176143Z"},"trusted":true},"execution_count":4,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.5, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"1_LoadHomeData\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"markdown","source":"## Data Exploration\nUse the command you learned to view summary statistics of the data. Then fill in variables to answer the following questions","metadata":{"execution":{"iopub.status.busy":"2024-05-21T17:49:10.631278Z","iopub.execute_input":"2024-05-21T17:49:10.631771Z","iopub.status.idle":"2024-05-21T17:49:10.639119Z","shell.execute_reply.started":"2024-05-21T17:49:10.631727Z","shell.execute_reply":"2024-05-21T17:49:10.637634Z"}}},{"cell_type":"code","source":"# Print summary statistics in next line\nhome_data.describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T22:18:11.178086Z","iopub.execute_input":"2024-05-21T22:18:11.178694Z","iopub.status.idle":"2024-05-21T22:18:11.299705Z","shell.execute_reply.started":"2024-05-21T22:18:11.178662Z","shell.execute_reply":"2024-05-21T22:18:11.298835Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                Id   MSSubClass  LotFrontage        LotArea  OverallQual  \\\ncount  1460.000000  1460.000000  1201.000000    1460.000000  1460.000000   \nmean    730.500000    56.897260    70.049958   10516.828082     6.099315   \nstd     421.610009    42.300571    24.284752    9981.264932     1.382997   \nmin       1.000000    20.000000    21.000000    1300.000000     1.000000   \n25%     365.750000    20.000000    59.000000    7553.500000     5.000000   \n50%     730.500000    50.000000    69.000000    9478.500000     6.000000   \n75%    1095.250000    70.000000    80.000000   11601.500000     7.000000   \nmax    1460.000000   190.000000   313.000000  215245.000000    10.000000   \n\n       OverallCond    YearBuilt  YearRemodAdd   MasVnrArea   BsmtFinSF1  ...  \\\ncount  1460.000000  1460.000000   1460.000000  1452.000000  1460.000000  ...   \nmean      5.575342  1971.267808   1984.865753   103.685262   443.639726  ...   \nstd       1.112799    30.202904     20.645407   181.066207   456.098091  ...   \nmin       1.000000  1872.000000   1950.000000     0.000000     0.000000  ...   \n25%       5.000000  1954.000000   1967.000000     0.000000     0.000000  ...   \n50%       5.000000  1973.000000   1994.000000     0.000000   383.500000  ...   \n75%       6.000000  2000.000000   2004.000000   166.000000   712.250000  ...   \nmax       9.000000  2010.000000   2010.000000  1600.000000  5644.000000  ...   \n\n        WoodDeckSF  OpenPorchSF  EnclosedPorch    3SsnPorch  ScreenPorch  \\\ncount  1460.000000  1460.000000    1460.000000  1460.000000  1460.000000   \nmean     94.244521    46.660274      21.954110     3.409589    15.060959   \nstd     125.338794    66.256028      61.119149    29.317331    55.757415   \nmin       0.000000     0.000000       0.000000     0.000000     0.000000   \n25%       0.000000     0.000000       0.000000     0.000000     0.000000   \n50%       0.000000    25.000000       0.000000     0.000000     0.000000   \n75%     168.000000    68.000000       0.000000     0.000000     0.000000   \nmax     857.000000   547.000000     552.000000   508.000000   480.000000   \n\n          PoolArea       MiscVal       MoSold       YrSold      SalePrice  \ncount  1460.000000   1460.000000  1460.000000  1460.000000    1460.000000  \nmean      2.758904     43.489041     6.321918  2007.815753  180921.195890  \nstd      40.177307    496.123024     2.703626     1.328095   79442.502883  \nmin       0.000000      0.000000     1.000000  2006.000000   34900.000000  \n25%       0.000000      0.000000     5.000000  2007.000000  129975.000000  \n50%       0.000000      0.000000     6.000000  2008.000000  163000.000000  \n75%       0.000000      0.000000     8.000000  2009.000000  214000.000000  \nmax     738.000000  15500.000000    12.000000  2010.000000  755000.000000  \n\n[8 rows x 38 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>MSSubClass</th>\n      <th>LotFrontage</th>\n      <th>LotArea</th>\n      <th>OverallQual</th>\n      <th>OverallCond</th>\n      <th>YearBuilt</th>\n      <th>YearRemodAdd</th>\n      <th>MasVnrArea</th>\n      <th>BsmtFinSF1</th>\n      <th>...</th>\n      <th>WoodDeckSF</th>\n      <th>OpenPorchSF</th>\n      <th>EnclosedPorch</th>\n      <th>3SsnPorch</th>\n      <th>ScreenPorch</th>\n      <th>PoolArea</th>\n      <th>MiscVal</th>\n      <th>MoSold</th>\n      <th>YrSold</th>\n      <th>SalePrice</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>count</th>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1201.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1452.000000</td>\n      <td>1460.000000</td>\n      <td>...</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n      <td>1460.000000</td>\n    </tr>\n    <tr>\n      <th>mean</th>\n      <td>730.500000</td>\n      <td>56.897260</td>\n      <td>70.049958</td>\n      <td>10516.828082</td>\n      <td>6.099315</td>\n      <td>5.575342</td>\n      <td>1971.267808</td>\n      <td>1984.865753</td>\n      <td>103.685262</td>\n      <td>443.639726</td>\n      <td>...</td>\n      <td>94.244521</td>\n      <td>46.660274</td>\n      <td>21.954110</td>\n      <td>3.409589</td>\n      <td>15.060959</td>\n      <td>2.758904</td>\n      <td>43.489041</td>\n      <td>6.321918</td>\n      <td>2007.815753</td>\n      <td>180921.195890</td>\n    </tr>\n    <tr>\n      <th>std</th>\n      <td>421.610009</td>\n      <td>42.300571</td>\n      <td>24.284752</td>\n      <td>9981.264932</td>\n      <td>1.382997</td>\n      <td>1.112799</td>\n      <td>30.202904</td>\n      <td>20.645407</td>\n      <td>181.066207</td>\n      <td>456.098091</td>\n      <td>...</td>\n      <td>125.338794</td>\n      <td>66.256028</td>\n      <td>61.119149</td>\n      <td>29.317331</td>\n      <td>55.757415</td>\n      <td>40.177307</td>\n      <td>496.123024</td>\n      <td>2.703626</td>\n      <td>1.328095</td>\n      <td>79442.502883</td>\n    </tr>\n    <tr>\n      <th>min</th>\n      <td>1.000000</td>\n      <td>20.000000</td>\n      <td>21.000000</td>\n      <td>1300.000000</td>\n      <td>1.000000</td>\n      <td>1.000000</td>\n      <td>1872.000000</td>\n      <td>1950.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>1.000000</td>\n      <td>2006.000000</td>\n      <td>34900.000000</td>\n    </tr>\n    <tr>\n      <th>25%</th>\n      <td>365.750000</td>\n      <td>20.000000</td>\n      <td>59.000000</td>\n      <td>7553.500000</td>\n      <td>5.000000</td>\n      <td>5.000000</td>\n      <td>1954.000000</td>\n      <td>1967.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>5.000000</td>\n      <td>2007.000000</td>\n      <td>129975.000000</td>\n    </tr>\n    <tr>\n      <th>50%</th>\n      <td>730.500000</td>\n      <td>50.000000</td>\n      <td>69.000000</td>\n      <td>9478.500000</td>\n      <td>6.000000</td>\n      <td>5.000000</td>\n      <td>1973.000000</td>\n      <td>1994.000000</td>\n      <td>0.000000</td>\n      <td>383.500000</td>\n      <td>...</td>\n      <td>0.000000</td>\n      <td>25.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>6.000000</td>\n      <td>2008.000000</td>\n      <td>163000.000000</td>\n    </tr>\n    <tr>\n      <th>75%</th>\n      <td>1095.250000</td>\n      <td>70.000000</td>\n      <td>80.000000</td>\n      <td>11601.500000</td>\n      <td>7.000000</td>\n      <td>6.000000</td>\n      <td>2000.000000</td>\n      <td>2004.000000</td>\n      <td>166.000000</td>\n      <td>712.250000</td>\n      <td>...</td>\n      <td>168.000000</td>\n      <td>68.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>0.000000</td>\n      <td>8.000000</td>\n      <td>2009.000000</td>\n      <td>214000.000000</td>\n    </tr>\n    <tr>\n      <th>max</th>\n      <td>1460.000000</td>\n      <td>190.000000</td>\n      <td>313.000000</td>\n      <td>215245.000000</td>\n      <td>10.000000</td>\n      <td>9.000000</td>\n      <td>2010.000000</td>\n      <td>2010.000000</td>\n      <td>1600.000000</td>\n      <td>5644.000000</td>\n      <td>...</td>\n      <td>857.000000</td>\n      <td>547.000000</td>\n      <td>552.000000</td>\n      <td>508.000000</td>\n      <td>480.000000</td>\n      <td>738.000000</td>\n      <td>15500.000000</td>\n      <td>12.000000</td>\n      <td>2010.000000</td>\n      <td>755000.000000</td>\n    </tr>\n  </tbody>\n</table>\n<p>8 rows × 38 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# What is the average lot size (rounded to nearest integer)?\navg_lot_size = 10517\n\n# As of today, how old is the newest home (current year - the date in which it was built)\nnewest_home_age = 14\n\n# Checks your answers\nstep_2.check()","metadata":{"execution":{"iopub.status.busy":"2024-05-21T22:18:11.301997Z","iopub.execute_input":"2024-05-21T22:18:11.302536Z","iopub.status.idle":"2024-05-21T22:18:11.310570Z","shell.execute_reply.started":"2024-05-21T22:18:11.302503Z","shell.execute_reply":"2024-05-21T22:18:11.309822Z"},"trusted":true},"execution_count":6,"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.5, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"2_HomeDescription\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}]},{"cell_type":"markdown","source":"*Checking the date of this database*\nBecause the newest date of this datebase is 2010, which is old. I will check to see wheather it'll effect my ML model later on.\n\n\n***Note: Because this is an exercise for to familarize with Machine Learning model usign Random Forest. I will leave it as it is***","metadata":{}},{"cell_type":"code","source":"# Checking the number of each house built using this code\n\n# Check the years built\ngrouped = home_data[[\"Id\",\"YearBuilt\"]].groupby(\"YearBuilt\").count()\n\ngrouped.sort_values(\"Id\", ascending=False)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T22:18:11.312066Z","iopub.execute_input":"2024-05-21T22:18:11.312417Z","iopub.status.idle":"2024-05-21T22:18:11.334849Z","shell.execute_reply.started":"2024-05-21T22:18:11.312387Z","shell.execute_reply":"2024-05-21T22:18:11.333962Z"},"trusted":true},"execution_count":7,"outputs":[{"execution_count":7,"output_type":"execute_result","data":{"text/plain":"           Id\nYearBuilt    \n2006       67\n2005       64\n2004       54\n2007       49\n2003       45\n...        ..\n1904        1\n1898        1\n1893        1\n1882        1\n2010        1\n\n[112 rows x 1 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n    </tr>\n    <tr>\n      <th>YearBuilt</th>\n      <th></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>2006</th>\n      <td>67</td>\n    </tr>\n    <tr>\n      <th>2005</th>\n      <td>64</td>\n    </tr>\n    <tr>\n      <th>2004</th>\n      <td>54</td>\n    </tr>\n    <tr>\n      <th>2007</th>\n      <td>49</td>\n    </tr>\n    <tr>\n      <th>2003</th>\n      <td>45</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>1904</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1898</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1893</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>1882</th>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>2010</th>\n      <td>1</td>\n    </tr>\n  </tbody>\n</table>\n<p>112 rows × 1 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"year_built = home_data[\"YearBuilt\"]\n\nbins = year_built.max() - year_built.min()\nyear_built.hist(bins=bins)","metadata":{"execution":{"iopub.status.busy":"2024-05-21T22:18:11.336066Z","iopub.execute_input":"2024-05-21T22:18:11.336552Z","iopub.status.idle":"2024-05-21T22:18:11.953277Z","shell.execute_reply.started":"2024-05-21T22:18:11.336523Z","shell.execute_reply":"2024-05-21T22:18:11.951945Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"<Axes: >"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"markdown","source":"From this result, I obtaied 2 information:\n- In 2016, 64 houses were built which is the maximun value.\n- From the 1904 and 2010, 1 house were built each year, which is the minimum value.\n\nIt is noteworthy because there was a declining trend until 2009, but houses were still being built. However, it seems unlikely that the number suddenly became 1 in 2010. Therefore, it safe to assumed that this dataset stopped being updated around the middle of 2010, to be more precise, at the beginning of 2010.\n\nThis may have a slight impact on the model. Because the trend from 2010 to 2024 is not reflected in the model.\n\nHowever, I don't think that means the model is completely useless. It is a fact that the data up until 2010 is included in this model, and the predicted results can be very informative.","metadata":{}},{"cell_type":"markdown","source":"## Data For Modeling \n","metadata":{}},{"cell_type":"code","source":"# print the list of columns in the dataset to find the name of the prediction target\nhome_data.columns","metadata":{"execution":{"iopub.status.busy":"2024-05-21T22:18:11.954737Z","iopub.execute_input":"2024-05-21T22:18:11.955062Z","iopub.status.idle":"2024-05-21T22:18:11.963229Z","shell.execute_reply.started":"2024-05-21T22:18:11.955036Z","shell.execute_reply":"2024-05-21T22:18:11.962071Z"},"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"Index(['Id', 'MSSubClass', 'MSZoning', 'LotFrontage', 'LotArea', 'Street',\n       'Alley', 'LotShape', 'LandContour', 'Utilities', 'LotConfig',\n       'LandSlope', 'Neighborhood', 'Condition1', 'Condition2', 'BldgType',\n       'HouseStyle', 'OverallQual', 'OverallCond', 'YearBuilt', 'YearRemodAdd',\n       'RoofStyle', 'RoofMatl', 'Exterior1st', 'Exterior2nd', 'MasVnrType',\n       'MasVnrArea', 'ExterQual', 'ExterCond', 'Foundation', 'BsmtQual',\n       'BsmtCond', 'BsmtExposure', 'BsmtFinType1', 'BsmtFinSF1',\n       'BsmtFinType2', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', 'Heating',\n       'HeatingQC', 'CentralAir', 'Electrical', '1stFlrSF', '2ndFlrSF',\n       'LowQualFinSF', 'GrLivArea', 'BsmtFullBath', 'BsmtHalfBath', 'FullBath',\n       'HalfBath', 'BedroomAbvGr', 'KitchenAbvGr', 'KitchenQual',\n       'TotRmsAbvGrd', 'Functional', 'Fireplaces', 'FireplaceQu', 'GarageType',\n       'GarageYrBlt', 'GarageFinish', 'GarageCars', 'GarageArea', 'GarageQual',\n       'GarageCond', 'PavedDrive', 'WoodDeckSF', 'OpenPorchSF',\n       'EnclosedPorch', '3SsnPorch', 'ScreenPorch', 'PoolArea', 'PoolQC',\n       'Fence', 'MiscFeature', 'MiscVal', 'MoSold', 'YrSold', 'SaleType',\n       'SaleCondition', 'SalePrice'],\n      dtype='object')"},"metadata":{}}]},{"cell_type":"code","source":"# Assign Y values\ny = home_data.SalePrice\n\n# Steps to create DataFrame X holding predictive features\n# Create the list of features below\nfeature_names = ['LotArea','YearBuilt','1stFlrSF', '2ndFlrSF',\n                 'FullBath','BedroomAbvGr','TotRmsAbvGrd']\n\n# Select data corresponding to features in feature_names\nX = home_data[feature_names]\n\n# REview X data\nprint(X.describe())\n\n# print the top few lines\nprint(X.head())","metadata":{"execution":{"iopub.status.busy":"2024-05-21T22:23:32.440866Z","iopub.execute_input":"2024-05-21T22:23:32.441271Z","iopub.status.idle":"2024-05-21T22:23:32.449445Z","shell.execute_reply.started":"2024-05-21T22:23:32.441240Z","shell.execute_reply":"2024-05-21T22:23:32.448100Z"},"trusted":true},"execution_count":11,"outputs":[]},{"cell_type":"markdown","source":"## Building my Model\n\nSince I want to want to make predictions for new houses coming on the market, this is *Regression problem* with continuous target variables. Therefore,I chose `DecisionTreeRegressor` to make sure that the output or prediction from the decision tree is a real number\n\n\nCreate a `DecisionTreeRegressor` and save it iowa_model.","metadata":{}},{"cell_type":"code","source":"from sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_absolute_error\n\niowa_model = DecisionTreeRegressor(random_state=1).fit(X,y)\npredict_house = iowa_model.predict(X)\ntrain_error = mean_absolute_error(y,predict_house)\nprint('MAE for the predictions in-sample:')\nprint(train_error)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T00:08:27.092820Z","iopub.execute_input":"2024-05-22T00:08:27.093225Z","iopub.status.idle":"2024-05-22T00:08:27.113225Z","shell.execute_reply.started":"2024-05-22T00:08:27.093194Z","shell.execute_reply":"2024-05-22T00:08:27.112058Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"MAE for the predictions in-sample:\n62.35433789954339\n","output_type":"stream"}]},{"cell_type":"code","source":"print('Making predictions for the following 5 houses:')\nprint(X.head())\n\nprint('The predictions are:')\nprint(iowa_model.predict(X.head()))\n\n# Using .tolist() to fit the output values with the prediction values types\nprint('The actual house prices for the top 5:')\nprint(y.head().tolist())","metadata":{"execution":{"iopub.status.busy":"2024-05-21T23:20:26.973534Z","iopub.execute_input":"2024-05-21T23:20:26.975033Z","iopub.status.idle":"2024-05-21T23:20:26.988598Z","shell.execute_reply.started":"2024-05-21T23:20:26.974983Z","shell.execute_reply":"2024-05-21T23:20:26.987215Z"},"trusted":true},"execution_count":18,"outputs":[{"name":"stdout","text":"Making predictions for the following 5 houses:\n   LotArea  YearBuilt  1stFlrSF  2ndFlrSF  FullBath  BedroomAbvGr  \\\n0     8450       2003       856       854         2             3   \n1     9600       1976      1262         0         2             3   \n2    11250       2001       920       866         2             3   \n3     9550       1915       961       756         1             3   \n4    14260       2000      1145      1053         2             4   \n\n   TotRmsAbvGrd  \n0             8  \n1             6  \n2             6  \n3             7  \n4             9  \nThe predictions are:\n[208500. 181500. 223500. 140000. 250000.]\nThe actual house prices for the top 5:\n[208500, 181500, 223500, 140000, 250000]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"After comparing the results, here are my findings:\n- The first 5 actual house prices and the predictions for the first 5 are exactly the same\n- This is happening because I used the whole dataset to train the model. Thefore, the model learned all the possible patterns.\n- This is the results of overfitting, which means the model is performing extremely well in the training data but may not be outside of training data.\n\nThis is why it is important to split dataset to make sure I have 70% training dataset, 20% test set and 10% of validation set.\n\n## Model Validation\n\nAfter building prediction model, I need to evaluate the accuracy of my predictions. The criteria to qualify a good prediction model is the model's predictions generate as close as possible to what happens *outside of training data*.\n\nIt is important to note that I should not compare desired outcome values with the y variables because of the problems I stated above (overfitting).\n\nSince the dataset has a large values, it is not efficient and accurate to validate with random comparision. That is why I chose ****Mean Absolute Error**** (aka MAE) among many summarizing model quality methods\n\nerror=actual−predicted","metadata":{}},{"cell_type":"code","source":"# import model quality method\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_value, y_train, y_value = train_test_split(X,y,random_state=1)\n# Define the model\niowa_model = DecisionTreeRegressor()\n# Fit the model\niowa_model.fit(X_train,y_train)\n\n# Comparing the predictions values and actual values\nvalues_predict = iowa_model.predict(X_value)\n\nprint(values_predict[:5])\nprint(y_value.head().tolist())","metadata":{"execution":{"iopub.status.busy":"2024-05-21T23:57:05.512891Z","iopub.execute_input":"2024-05-21T23:57:05.513316Z","iopub.status.idle":"2024-05-21T23:57:05.540486Z","shell.execute_reply.started":"2024-05-21T23:57:05.513287Z","shell.execute_reply":"2024-05-21T23:57:05.539532Z"},"trusted":true},"execution_count":19,"outputs":[{"name":"stdout","text":"[186500. 184000. 130000.  92000. 170000.]\n[231500, 179500, 122000, 84500, 142000]\n","output_type":"stream"}]},{"cell_type":"code","source":"# Calculate the MEA\nfrom sklearn.metrics import mean_absolute_error\nerror_value = mean_absolute_error(y_value,values_predict)\nprint(error_value)","metadata":{"execution":{"iopub.status.busy":"2024-05-22T00:06:48.323998Z","iopub.execute_input":"2024-05-22T00:06:48.324413Z","iopub.status.idle":"2024-05-22T00:06:48.331619Z","shell.execute_reply.started":"2024-05-22T00:06:48.324380Z","shell.execute_reply":"2024-05-22T00:06:48.330281Z"},"trusted":true},"execution_count":24,"outputs":[{"name":"stdout","text":"29609.742465753425\n","output_type":"stream"}]},{"cell_type":"code","source":"y_train.describe()","metadata":{"execution":{"iopub.status.busy":"2024-05-22T00:17:11.895195Z","iopub.execute_input":"2024-05-22T00:17:11.895615Z","iopub.status.idle":"2024-05-22T00:17:11.908676Z","shell.execute_reply.started":"2024-05-22T00:17:11.895582Z","shell.execute_reply":"2024-05-22T00:17:11.907655Z"},"trusted":true},"execution_count":28,"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"count      1095.000000\nmean     182319.757078\nstd       78543.737959\nmin       34900.000000\n25%      130500.000000\n50%      164900.000000\n75%      215000.000000\nmax      755000.000000\nName: SalePrice, dtype: float64"},"metadata":{}}]},{"cell_type":"markdown","source":"My mean absolute error for the in-sample data was about 62 dollars. But for the out-sample data, it was about 30,000 dollars.\nFor reference, the average house prices in the validation set was 180,000 dollars. Therefore, the error of the new values is a quarter of the average house prices.","metadata":{}},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}